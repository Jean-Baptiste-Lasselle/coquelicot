version: '3'

services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    container_name: "$NOM_CONTENEUR_GITLAB"
    restart: always
#     hostname: "gitlab"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.marguerite.io:8090/'
        gitlab_rails['gitlab_shell_ssh_port'] = 222
        gitlab_rails['lfs_enabled'] = true
        nginx['listen_port'] = 8081
    ports:
      - "8081:8081"
      - "4443:443"
      - "2222:222"
    expose:
      - "3000"
      - "8081"
      - "4443"
      - "2222"
      - "80"
      - "222"
      - "443"
    volumes:
      - ./gitlab/config:/etc/gitlab
      - ./gitlab/logs:/var/log/gitlab
      - ./gitlab/data:/var/opt/gitlab
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.4

  runner:
    build: ./gitlab/runner/
    image: jbl/gitlab-runner:latest
    container_name: 'runner'
#     hostname: "runner"
    restart: "always"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#     links:
#       - marguerite_gitlab
    environment:
      - GITLAB_HOST=marguerite_gitlab:8081
    ports:
      - "8000:8000"
    expose:
      - "8000"
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.5

  mongo:
    # image: mongo:latest
    image: marguerite/mongo:1.0.0    
    build: ./mongodb/construction/
    # hostname: "mongo"
    container_name: 'mongo'
    volumes:
     - ./db/data:/data/db
     - ./db/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0
    expose:
      - "27017"
    ports:
      - 27017:27017
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.6
    
  mongo-init-replica:
    # image: mongo:3.2
    image: marguerite/mongo-replica-initializer:1.0.0
    build: ./mongo-init-replica/construction/
    container_name: 'mongo-init-replica'
    # + Pour que le conteneur reste UP ' N 'RUNNING, y compris lorsque le replicaSet a été créé avec succès, et
    # + le HEALTHCHECK est joué après le succès pour exposer un statut "healthy", ce
    # + qui déclenche le démarrage du conteneur RocketChat => plus nécessaire, depuis restart onfailure
    # tty: true
    # + il FAUDRA remplacer ce sleep par une meilleure solution
    # command: 'mongo mongo/rocketchat --eval "rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})"'
    # command: 'mongo mongo/rocketchat --eval "rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''mongo:27017'' } ]})"'
    # 
    # + Note : 
    # + on pourra ajouter une varible d'environnement à cette image custom, qui permettra de préciser le nom du
    # + replica Set à initialiser, et d'autres variables d'environnement, pour préciser une
    # + éventuelle configuration du replicaSet
    # 
#     environment:
#       - REPLICASET_NAME: ""
#       - REPLICASET_CONF_PARAM_1: ""
#       - REPLICASET_CONF_PARAM_2: ""
    networks:
      - devops
#     expose:
#       - 27017
    depends_on:
      - mongo
    # + Pour qu'il re-démarre, tant qu'il n'a pas réussit à initialiser le replicaSet
    restart: on-failure:40
    # restart: always
  rocketchat:
    container_name: "$NOM_CONTENEUR_ROCKETCHAT"
    image: coquelicot/rocket.chat:1.0.0
    build: 
      context: ./rocketchat/construction/
      args:
        # - HEALTHCHECK BUILD ENV. => devrait être dans un conteneur Père, dont celui ci hérite, avec les BUILD ARGS déjà fixés.
        # Les variables globales de nom identique, sont définies dans le fichier ".env", propre à Docker Compose
        - UTILISATEUR_ROCKETCHAT_HUBOT="$UTILISATEUR_ROCKETCHAT_HUBOT"
        - UTILISATEUR_ROCKETCHAT_HUBOT_MDP="$UTILISATEUR_ROCKETCHAT_HUBOT_MDP"
        - CHATROOM_ROCKETCHAT_HUBOT="$CHATROOM_ROCKETCHAT_HUBOT"
#     hostname: 'rocketchat'

    volumes:
      - ./rocketchat/uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://rocketchat.marguerite.io:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local?replicaSet=rs0
      - MAIL_URL="smtp://smtp.google.com"
      - ADMIN_USERNAME="$USERNAME_UTILISATEUR_ADMIN_INITIAL" 
      - ADMIN_PASS="$MDP_UTILISATEUR_ADMIN_INITIAL" 
      - ADMIN_EMAIL="$EMAIL_UTILISATEUR_ADMIN_INITIAL" 
    ports:
      - 3000:3000
    expose:
      - "3000"
    depends_on:
      - mongo
      # + Depuis utilisation d'un build image custom mongo avec HEALTHCHECK pour le
      # + conteneur 'mongo-init-replica', cf. ./mongo-init-replica/construction/replicaset-health-check
      # + mais plus depusi l'avènement du soudeur
      # - mongo-init-replica
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.8
    restart: always

  # le soudeur qui créée user et chatroom rocketchat, pour le HUBOT
  hubot-init-rocketchat:
    container_name: 'hubot-rocketchat-initializer'
    # image: mongo:3.2
    image: marguerite/hubot-rocketchat-initializer:1.0.0
    build: 
      context: ./hubot-init-rocketcha/construction/
      args:
        # + le user RocketChat Admin, qui sera utilisé pour créer le user "$UTILISATEUR_ROCKETCHAT_HUBOT" et "$CHATROOM_ROCKETCHAT_HUBOT"
        - USERNAME_UTILISATEUR_ADMIN_INITIAL="$USERNAME_UTILISATEUR_ADMIN_INITIAL" 
        - MDP_UTILISATEUR_ADMIN_INITIAL="$MDP_UTILISATEUR_ADMIN_INITIAL" 
        # - BUILD ENV. => devrait être dans un conteneur Père, dont celui ci hérite, avec les BUILD ARGS déjà fixés.
        # Les variables globales de nom identique, sont définies dans le fichier ".env", propre à Docker Compose
        - UTILISATEUR_ROCKETCHAT_HUBOT="$UTILISATEUR_ROCKETCHAT_HUBOT"
        - UTILISATEUR_ROCKETCHAT_HUBOT_MDP="$UTILISATEUR_ROCKETCHAT_HUBOT_MDP"
        - UTILISATEUR_ROCKETCHAT_HUBOT_EMAIL="$UTILISATEUR_ROCKETCHAT_HUBOT_EMAIL"
        - CHATROOM_ROCKETCHAT_HUBOT="$CHATROOM_ROCKETCHAT_HUBOT"
        - NUMERO_PORT_ECOUTE_ROCKETCHAT="$NUMERO_PORT_ECOUTE_ROCKETCHAT"
    environment:
      # + le user RocketChat Admin, qui sera utilisé pour créer le user "$UTILISATEUR_ROCKETCHAT_HUBOT" et "$CHATROOM_ROCKETCHAT_HUBOT"
      - USERNAME_UTILISATEUR_ADMIN_INITIAL="$USERNAME_UTILISATEUR_ADMIN_INITIAL" 
      - MDP_UTILISATEUR_ADMIN_INITIAL="$MDP_UTILISATEUR_ADMIN_INITIAL" 
      # ++ Le soudeur créée l'utilisateur "$UTILISATEUR_ROCKETCHAT_HUBOT" , en utilisant l'utilisateur initial
      - UTILISATEUR_ROCKETCHAT_HUBOT="$UTILISATEUR_ROCKETCHAT_HUBOT"
      - UTILISATEUR_ROCKETCHAT_HUBOT_MDP="$UTILISATEUR_ROCKETCHAT_HUBOT_MDP"
      - UTILISATEUR_ROCKETCHAT_HUBOT_EMAIL="$UTILISATEUR_ROCKETCHAT_HUBOT_EMAIL"
      - CHATROOM_ROCKETCHAT_HUBOT="$CHATROOM_ROCKETCHAT_HUBOT"
      - NOM_DOMAINE_DOCKER_ROCKETCHAT="$NOM_CONTENEUR_ROCKETCHAT"
      - NUMERO_PORT_ECOUTE_ROCKETCHAT="$NUMERO_PORT_ECOUTE_ROCKETCHAT"
    networks:
      - devops
    depends_on:
    # + Pour qu'il ne démarre, que lorsque le soudeur précédent a terminé son trvail
      - mongo
    # + Pour qu'il re-démarre, tant qu'il n'a pas réussit à créé user et chatroom rocketchat
    restart: on-failure:40

  # hubot, the popular chatbot (add the bot user first and change the password before starting this image)
  hubot:
    image: rocketchat/hubot-rocketchat:latest
#     hostname: "hubot"
    container_name: 'hubot'
    environment:
      - ROCKETCHAT_URL=rocketchat:3000
      # - ROCKETCHAT_ROOM=devops
      # Ce channel RocketChat est à crééer avec le client Web RocketChat, comme l'utlisateur Rocketchat utilisé par ce hubot
      - ROCKETCHAT_ROOM="$CHATROOM_ROCKETCHAT_HUBOT"
      - ROCKETCHAT_USER="$UTILISATEUR_ROCKETCHAT_HUBOT"
      - ROCKETCHAT_PASSWORD="$UTILISATEUR_ROCKETCHAT_HUBOT_MDP"
      - ROCKETCHAT_AUTH=password
      - BOT_NAME=NonoCadeauDulysse
      - LISTEN_ON_ALL_PUBLIC=true
      - GITLAB_URL="http://$NOM_CONTENEUR_GITLAB:8081/api/v3/"
      # + La "apiKey" Gitlab, qui doit être utilisée parle hubot, pour accéder à un compte Gitlab (et remonter des évènements tels que les pull request, comment on commit, etc...) 
      - GITLAB_API_KEY="$HUBOT_GITLAB_API_KEY"
      # + Le "Token" Gitlab, qui doit être utilisée parle hubot, pour accéder à un compte Gitlab (et remonter des évènements tels que les pull request, comment on commit, etc...) 
      - GITLAB_TOKEN=cNhsExCcNhsExicNhsExx
      # + Je pense qu'il s'agit du nombre maximal de messages consécutifs que le HUBOT pourra poster dans la chatroom (ANTI FLOOD)
      - GITLAB_RECORD_LIMIT=100
      #
      # + EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics,hubot-rocketchat-gitlab
      # + EXTERNAL_SCRIPTS=hubot-pugme,hubot-help,hubot-seen,hubot-links,hubot-diagnostics,hubot-rocketchat-gitlab
      # + cf. https://github.com/RocketChat/hubot-rocketchat#docker
      # + ------------------------------------------------------------------------------------------------------------
      # + J'ai appris à cette page : [https://github.com/RocketChat/Rocket.Chat/blob/develop/docker-compose.yml]
      # + que les "external scripts" sont des identifiants d'artefacts NODEJS / NPM : 
      # + On eput donc ajouter n'importe quel nom, du moement qu'il s'agit d'une dépendance existante dans
      # + le registry NPM du contexte de déploiement
      - EXTERNAL_SCRIPTS=hubot-pugme,hubot-help


#     links:
#       - rocketchat:rocketchat
#       - marguerite_gitlab:marguerite_gitlab
    volumes:
      - ./hubot/scripts:/home/hubot/scripts
    expose:
      - 3001
    ports:
      - 3001:3001
    # this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.9
    depends_on:
      # + le prochain palier de remontée du plongueur, cf. HEALTHCHECK rocketchat
      - rocketchat
  nginx:
    image: nginx
#     hostname: "proxy"
    container_name: "proxy"
    volumes:
      - ./nginx/chatops.conf:/etc/nginx/conf.d/chatops.conf
#       - ./nginx/hosts:/etc/hosts
      - ./nginx/logs:/var/log/nginx
      - ./nginx/certificates:/etc/nginx/certificates/
    ports:
      - "8090:80"
      - "443:443"
#      - "22:22"
    expose:
      - "3000"
      - "80"
      - "443"
#      - "22"
    environment:
#       - NGINX_HOST=marguerite.io
#       - GIT_HOST=gitlab.marguerite.io
#       - CHAT_HOST=rocketchat.marguerite.io
      - NGINX_PORT=80
      - NGINX_SSL=443
#       - NGINX_SSH=22
#     links:
#       - rocketchat:rocketchat
#       - marguerite_gitlab:marguerite_gitlab
    networks:
      - devops
#       devops:
#         ipv4_address: 192.168.160.10
    depends_on:
      - rocketchat

# --- Tests : Réseau
  sondereseau:
    # image: mongo:3.2
    image: marguerite/sonde-reseau:0.0.1
    build: ./tests/sondereseau/
#     hostname: "sondereseau"
    container_name: 'sondereseau'
    tty: true
#     command: yum update -y && yum install -y iputils && ping -c 4 localhost
    networks:
      - devops
    # restart: 'always'


networks:
  devops:
    # name: 'reseau-devops'
    driver: bridge
#     external: true 
#     ipam:
#       config:
#         - subnet: 192.168.160.0/24
#         - gateway: 192.168.160.1
#         # - gateway: 172.16.1.1
