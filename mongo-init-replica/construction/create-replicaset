#!/bin/bash



#   
#   
# J'ai pu vérifier qu e c'est exactement la commande suivante, qui permet de créer le replicaSet : 
#    
#         mongo mongo/rocketchat --eval "rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})"
#                              
# Et qu'avec cette commande, la réponse JSON de l'API est : 
# 
# 
# [jibl@pc-100 coquelicot]$ docker exec -it mongo sh -c "mongo mongo/rocketchat --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})\""
# MongoDB shell version v4.0.2
# connecting to: mongodb://mongo:27017/rocketchat
# MongoDB server version: 4.0.2
# {
# 	"ok" : 1,
# 	"operationTime" : Timestamp(1537042226, 1),
# 	"$clusterTime" : {
# 		"clusterTime" : Timestamp(1537042226, 1),
# 		"signature" : {
# 			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
# 			"keyId" : NumberLong(0)
# 		}
# 	}
# }

# 
#  

# export RESULTAT_JSON_REQUETE_MONGO=$(mongo mongo/rocketchat --eval "rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})")

# + J'ai aussi vérifié qu'alors, la commande permettant de vérfiier l'existence et le statut du ce replicaSet est 
#                               mongo mongo/rocketchat --eval "rs.status({ _id: 'rs0'})"
# Et qu'avec cette commande, la réponse JSON de l'API est : 
# - AVANT l'initialisation du replicaSet   : 
# {
# 	"operationTime" : Timestamp(0, 0),
# 	"ok" : 0,
# 	"errmsg" : "no replset config has been received",
# 	"code" : 94,
# 	"codeName" : "NotYetInitialized",
# 	"$clusterTime" : {
# 		"clusterTime" : Timestamp(0, 0),
# 		"signature" : {
# 			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
## 			"keyId" : NumberLong(0)
# 		}
# 	}
# }
# - APRES l'initialisation du replicaSet   : 
# 
# [jibl@pc-100 coquelicot]$ docker exec -it mongo sh -c "mongo mongo/rocketchat --eval \"rs.status({ _id: 'rs0'})\""
# 
# MongoDB shell version v4.0.2
# connecting to: mongodb://mongo:27017/rocketchat
# MongoDB server version: 4.0.2
# {
# 	"set" : "rs0",
# 	"date" : ISODate("2018-09-15T20:13:11.266Z"),
# 	"myState" : 1,
# 	"term" : NumberLong(1),
# 	"syncingTo" : "",
# 	"syncSourceHost" : "",
# 	"syncSourceId" : -1,
# 	"heartbeatIntervalMillis" : NumberLong(2000),
# 	"optimes" : {
# 		"lastCommittedOpTime" : {
# 			"ts" : Timestamp(1537042388, 1),
# 			"t" : NumberLong(1)
# 		},
# 		"readConcernMajorityOpTime" : {
# 			"ts" : Timestamp(1537042388, 1),
# 			"t" : NumberLong(1)
# 		},
# 		"appliedOpTime" : {
# 			"ts" : Timestamp(1537042388, 1),
# 			"t" : NumberLong(1)
# 		},
# 		"durableOpTime" : {
# 			"ts" : Timestamp(1537042388, 1),
# 			"t" : NumberLong(1)
# 		}
# 	},
# 	"lastStableCheckpointTimestamp" : Timestamp(1537042348, 1),
# 	"members" : [
# 		{
# 			"_id" : 0,
# 			"name" : "localhost:27017",
# 			"health" : 1,
# 			"state" : 1,
# 			"stateStr" : "PRIMARY",
# 			"uptime" : 877,
# 			"optime" : {
# 				"ts" : Timestamp(1537042388, 1),
# 				"t" : NumberLong(1)
# 			},
# 			"optimeDate" : ISODate("2018-09-15T20:13:08Z"),
# 			"syncingTo" : "",
# 			"syncSourceHost" : "",
# 			"syncSourceId" : -1,
# 			"infoMessage" : "",
# 			"electionTime" : Timestamp(1537042226, 2),
# 			"electionDate" : ISODate("2018-09-15T20:10:26Z"),
# 			"configVersion" : 1,
# 			"self" : true,
# 			"lastHeartbeatMessage" : ""
# 		}
# 	],
# 	"ok" : 1,
# 	"operationTime" : Timestamp(1537042388, 1),
# 	"$clusterTime" : {
# 		"clusterTime" : Timestamp(1537042388, 1),
# 		"signature" : {
# 			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
# 			"keyId" : NumberLong(0)
# 		}
# 	}
# }

# - 1 - On commence par récuperer le statut du replicaSet : un objet JSON sera renvoyé.
export RESULTAT_JSON_REQUETE_MONGO_RS_EXISTE=$(mongo mongo/rocketchat --eval "rs.status({ _id: 'rs0'}).ok"|grep -v mongo|grep -v Mongo)
export ETAT_DU_REPLICASET=$(mongo mongo/rocketchat --eval "rs.status({ _id: 'rs0'}).myState" | grep -v mongo|grep -v Mongo)
# - la commande mongo retournera un JSON, que l ereplicaSet existe, ou non, et quelque soit son état.
# - si la commande mongo échoue, ce n'est donc pas en raison de l'inexistence du replicaSet, alors un
#   code de retour entier, et non un JSON, sera retourné et stocké dans $RESULTAT_JSON_REQUETE_MONGO

echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> Je vérifie si le replicaSet a déjà été créé "
if [[ $RESULTAT_JSON_REQUETE_MONGO_RS_EXISTE = *"}"* ]]; then
  echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> On a bien un retour JSON, on vérifie si le replicaSet existe déjà ou non "
  echo " DEBUG - [RESULTAT_REQUETE_MONGO=$RESULTAT_REQUETE_MONGO] "
  # si la ligne "ok", contient le chiffre "0", c'est que le replicaSet 'rs0' n'a pas encore été initialisé
  if [ "$RESULTAT_JSON_REQUETE_MONGO_RS_EXISTE" == "1" ]; then
    # le replicaSet existe déjà, on ne vérifie pas son état avec la commande :
    # export ETAT_DU_REPLICASET=$(mongo mongo/rocketchat --eval "rs.status({ _id: 'rs0'}).myState" | grep -v mongo|grep -v Mongo)
    # parce que c'est la healthcheck qui doit faire cette vérification
    # Le replicaSet existe bel et bien, on sort donc avec le code de retour zéro.
    exit 0
  else
    echo "  => le replicaSet [rs0] n'a même pas encore été créé dans l'hôte MongoDB [mongo:27017]: Il est temps de le créer !  "
  fi
else
  echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> La commande mondo a foiré, mais pas parce que le replicaSet est inexistantOn a bien un retour JSON "
  exit 1
fi


# Enfin, pour vérifier que l'état du replicaSet est "1" (PRIMARY), on peut exécuter l'instruction suivante (testée)
# export ETAT_DU_REPLICASET=$(mongo mongo/rocketchat --eval "rs.status({ _id: 'rs0'}).myState" | grep -v mongo|grep -v Mongo)
# -> pour l'instant, on se content de vérifer son existence



# - 2 - Ensuite, on vérifie que dans le JSON, on trouve bien mention de l'ID du replicaSet, et on vérifie son statut, le
#       tout en "parsant" le JSON. Pour cela, on doit utiliser la structure de l'output de cette commande, précisé
#       par la documentation ofiicielle : https://docs.mongodb.com/manual/reference/command/replSetGetStatus/#rs-status-output
# -------------------------------------------------------------------------------------------------------------------------
# -- d'après la doc officielle, le JSON retourné coontient l'info du nom de replicaSet, et de son statut "myState" :
# 
# -------------------------------------------------------------------------------------------------------------------------
#           {
#              "set" : "replset",
#              "date" : ISODate("2018-05-13T16:36:54.319Z"),
#              "myState" : 1,
#              etc...
#
# -------------------------------------------------------------------------------------------------------------------------
# 
#    il est donc possible de parcourir l'arbre JSON à l'aide de commandes mongoDB, du genre du find(), pour
#    retrouver le name et le "myState" du replicaSet `rs0`


# -------------------------------------------------------------------------------------------------------------------------
# Donc, si  : 
# 
#     mongo mongo/rocketchat --eval "rs.status({ _id: ''rs0''})"
# 
# retourne une valeur, c'est que le replicaSet "rs0" existe. Si cette commande retourne la chîne de caractère vide ou
# un truc du genre un objet JSON vide "{}", alors le replica set 'rs0' n'existe pas. (à vérifier: c'est peut-être un
# JSON vide, et non la chaîne de caractère vide, qui est renvoyée quand le replicaSet n'existe pas).
# 


# Il faut donc tenter de créer le replicaSet.



echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> Je tente de créer le replicaset 'rs0' "

# ==>> Comme dans le docker-compose.yml distribué par l'équipe RocketChat : 
export RESULTAT_JSON_REQUETE_MONGO=$(mongo mongo/rocketchat --eval "rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'mongo:27017' } ]})")

if [[ $RESULTAT_JSON_REQUETE_MONGO = *"}"* ]]; then
  echo "  "
  echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> On a bien un retour JSON, le healthcheck vérifiera la création et l'état du replicaSet..."
  echo "  "
  echo "$AFFICHAGE_JSON_REQUETE_MONGO"
  echo "  "
  exit 0
else
  echo "  "
  echo " MONGO-IINIT-REPLICA >>> CREATE-REPLICASET ===>>> La commande mondo a foiré, mais pas parce que le replicaSet est inexistantOn a bien un retour JSON "
  echo "  "
  exit 1
fi

