#!/bin/bash

# La valeur de ces 3 variables est passée en argument par le script ./operations.sh
# Le script ./operations.sh déduit du fichier docker-compose.yml, la valeur de ces variables, en parsant
# les variables d'environnement déclarées pour chaque définition de service dans le [docker-compose.yml].
# Pour ces variables d'envrionnement, je vais utiliser le ficheir de conf de varibles globales docker-compose :
# le fichier [.env] , cf. doc officielle [https://docs.docker.com/compose/environment-variables/#the-env-file]
# -------------------------------------------------------------------------------------------------------------------------
# export UTILISATEUR_ROCKETCHAT_HUBOT=$1
# export UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$2
# export CHATROOM_ROCKETCHAT_HUBOT=$3


# Ce healthcheck vérifiera : 
# -------------------------------------------------------------------------------------------------------------------------
# -- Que le user RocketChat, que le HUBOT va utiliser, est bien créé,
# -- Que j'arrive bien à l'authentifier auprès de RocketChat avec le user et le mot de passe qui seront utilisés par le HUBOT:
# -- Que la Chatroom que le HUBOT va utiliser, est bien créée, que j'arrive à entrer (j'ai les permissions suffisantes) dans 
#    cette Chatroom, avec le user et le mot de passe testés précédemment.

# -------------------------------------------------------------------------------------------------------------------------
# Pour ce faire, ce HealthCheck Utilisera : 
# -------------------------------------------------------------------------------------------------------------------------
# - l'exacte même bibliothèque que le HUBOT distribué par RocketCHat, utilise pour s'authentifier à RockerChat
# - et le distribution management de ce cette recette docker-compose, healthcheck, doit permettre de garantir que : 
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HUBOT, de la biliothèque utilisée dans le HUBOT de cette recette
#       et
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK, de la biliothèque utilisée dans ce HEALTHCHECK
#       sont égaux, et cette recette devra même permettre de fixer cette valeur avec un seul et même paramètre de
#       configuration, qui sera la version de HUBOT.
#       Ainsi, la version de HUBOT doit permettre de résoudre la dépendance : $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK
#       Et donc ce Healtcheck est elligible à être versionné en tant que dépendance, dans un repo git distinct de 
#       cette recette, pour la souplesse des tests.
# -------------------------------------------------------------------------------------------------------------------------
# Noooon, ce quio est naturel ici, c’est d’utiliser les moyens que l’application RocketChat Elle-même, met à disposition, pour vérifier si un user existe bel et bien. Donc envoyer uen requête HTTPréalisant l’authentification, quitte à la choper à la volée,dans Firefox, avec la console réseau accessible F12.
# Voire même, il faurdrait utiliser la REST AP I de Rocket Chat , qui permet à l’application mobile, de réaliser l’authentification.
# Encore jsute des requêtes HTTP CURL, qu ece soit pour vérifier le user, ou vérifer l’existence de la CHATROOM
# -------------------------------------------------------------------------------------------------------------------------

# ===>>>>> Test CURL pour vérifier l'auth avec le user $UTILISATEUR_ROCKETCHAT_HUBOT et le mot de passe $UTILISATEUR_ROCKETCHAT_HUBOT_MDP
# cf. https://rocket.chat/docs/developer-guides/rest-api/authentication/login/
# D'après cette doc, il faudrait que j'ajoute une option curl pour préciser un apiTken ou un truc comme ça, comme celui que
# RocketChat Me Donne Quand je créée un incoming webhook
# -> SI la requête curl échoue, alors "exit 1" sera évalué, et donc le processus d'exécution de script s'interrompt, et retourne le code d'erreur 1
curl http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP" || exit 1
# ===>>>>> Test CURL pour vérifier l'existence de la CHATROOM $CHATROOM_ROCKETCHAT_HUBOT
curl http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP" || exit 1
# ===>>>>> Test CURL pour vérifier que l'utilisateur $UTILISATEUR_ROCKETCHAT_HUBOT a les permissions pour entrer dans la $CHATROOM_ROCKETCHAT_HUBOT
echo "Pour l'instant, le HEALTHCHECK USER Et CHATROMM ROKETCHAT POUR HUBOT, EST ENCORE à implémenter. DOnc le test échoue par défaut d'implémentation".
exit 1


# - Exterait de la doc Officielle RocketChat : 

# Notes

# -> You will need to provide the authToken and userId for any of the authenticated methods.
# -> If your user has two-factor(2FA) authentication enabled, you must send a request like this.
# -> If LDAP authentication is enabled, you must maintain the login in the same way as you normally do. Similarly if 2FA is enabled for an LDAP user. Everything stays the same.
# Example Call - As Form Data
# 
# curl http://localhost:3000/api/v1/login \
#      -d "username=myusername&password=mypassword"
# 
# curl http://localhost:3000/api/v1/login \
#      -d "user=myusername&password=mypassword"
# 
# curl http://localhost:3000/api/v1/login \
#      -d "user=my@email.com&password=mypassword"
# 
# Example Call - As JSON
# 
# curl -H "Content-type:application/json" \
#       http://localhost:3000/api/v1/login \
#       -d '{ "username": "myusername", "password": "mypassword" }'
# 
# curl -H "Content-type:application/json" \
#       http://localhost:3000/api/v1/login \
#       -d '{ "user": "myusername", "password": "mypassword" }'
# 
# curl -H "Content-type:application/json" \
#       http://localhost:3000/api/v1/login \
#       -d '{ "user": "my@email.com", "password": "mypassword" }'

# Example Call - When two-factor(2FA) authentication is enabled
# 
# curl -H "Content-type:application/json" \
#       http://localhost:3000/api/v1/login \
#       -d '{ "totp": { "login": { "user": {"email": "rocket.cat@rocket.chat"}, "password": "password" }, "code": "224610" } }# 
# 
# curl -H "Content-type:application/json" \
#       http://localhost:3000/api/v1/login \
#       -d '{ "totp": { "login": { "user": {"username": "rocket.cat"}, "password": "password" }, "code": "224610" } }# 
# 
# Result
# 
# {
#  "status": "success",
#   "data": {
#       "authToken": "9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq",
#       "userId": "aobEdbYhXfu5hkeqG",
#       "me": {
#             "_id": "aYjNnig8BEAWeQzMh",
#             "name": "Rocket Cat",
#             "emails": [
#                 {
#                   "address": "rocket.cat@rocket.chat",
#                   "verified": false
#                 }
#             ],
#             "status": "offline",
#             "statusConnection": "offline",
#             "username": "rocket.cat",
#             "utcOffset": -3,
#             "active": true,
#             "roles": [
#                 "admin"
#             ],
#             "settings": {
#                 "preferences": {}
#               }
#         }
#    }
# }
