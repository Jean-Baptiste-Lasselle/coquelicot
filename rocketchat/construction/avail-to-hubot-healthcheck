#!/bin/bash

# La valeur de ces 3 variables est passée en argument par le script ./operations.sh
# Le script ./operations.sh déduit du fichier docker-compose.yml, la valeur de ces variables, en parsant
# les variables d'environnement déclarées pour chaque définition de service dans le [docker-compose.yml].
# Pour ces variables d'envrionnement, je vais utiliser le ficheir de conf de varibles globales docker-compose :
# le fichier [.env] , cf. doc officielle [https://docs.docker.com/compose/environment-variables/#the-env-file]
# -------------------------------------------------------------------------------------------------------------------------
# export UTILISATEUR_ROCKETCHAT_HUBOT=$1
# export UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$2
# export CHATROOM_ROCKETCHAT_HUBOT=$3


# Ce healthcheck vérifiera : 
# -------------------------------------------------------------------------------------------------------------------------
# -- Que le user RocketChat, que le HUBOT va utiliser, est bien créé,
# -- Que j'arrive bien à l'authentifier auprès de RocketChat avec le user et le mot de passe qui seront utilisés par le HUBOT:
# -- Que la Chatroom que le HUBOT va utiliser, est bien créée, que j'arrive à entrer (j'ai les permissions suffisantes) dans 
#    cette Chatroom, avec le user et le mot de passe testés précédemment.

# -------------------------------------------------------------------------------------------------------------------------
# Pour ce faire, ce HealthCheck Utilisera : 
# -------------------------------------------------------------------------------------------------------------------------
# - l'exacte même bibliothèque que le HUBOT distribué par RocketCHat, utilise pour s'authentifier à RockerChat
# - et le distribution management de ce cette recette docker-compose, healthcheck, doit permettre de garantir que : 
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HUBOT, de la biliothèque utilisée dans le HUBOT de cette recette
#       et
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK, de la biliothèque utilisée dans ce HEALTHCHECK
#       sont égaux, et cette recette devra même permettre de fixer cette valeur avec un seul et même paramètre de
#       configuration, qui sera la version de HUBOT.
#       Ainsi, la version de HUBOT doit permettre de résoudre la dépendance : $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK
#       Et donc ce Healtcheck est elligible à être versionné en tant que dépendance, dans un repo git distinct de 
#       cette recette, pour la souplesse des tests.
# -------------------------------------------------------------------------------------------------------------------------
# Noooon, ce quio est naturel ici, c’est d’utiliser les moyens que l’application RocketChat Elle-même, met à disposition, pour vérifier si un user existe bel et bien. Donc envoyer uen requête HTTPréalisant l’authentification, quitte à la choper à la volée,dans Firefox, avec la console réseau accessible F12.
# Voire même, il faurdrait utiliser la REST AP I de Rocket Chat , qui permet à l’application mobile, de réaliser l’authentification.
# Encore jsute des requêtes HTTP CURL, qu ece soit pour vérifier le user, ou vérifer l’existence de la CHATROOM
# -------------------------------------------------------------------------------------------------------------------------
# echo " ------------------------------------------------------------ "
echo "  "
echo "  DEBUG  :  dans le HEALTH CHECK DNS LE CONTENEUR ROCKETCHAT : pour  le HUBOT / AVANT TOUTE COMMANDE "
echo " ------------------------------------------------------------ "
echo "  "
echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT=$UTILISATEUR_ROCKETCHAT_HUBOT]"
echo "  "
echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP]"
echo "  "
echo "  VERIF [CHATROOM_ROCKETCHAT_HUBOT=$CHATROOM_ROCKETCHAT_HUBOT]"
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "  "
echo "  "
# ===>>>>> Test CURL pour vérifier l'auth avec le user $UTILISATEUR_ROCKETCHAT_HUBOT et le mot de passe $UTILISATEUR_ROCKETCHAT_HUBOT_MDP
# cf. https://rocket.chat/docs/developer-guides/rest-api/authentication/login/
# D'après cette doc, il faudrait que j'ajoute une option curl pour préciser un apiTken ou un truc comme ça, comme celui que
# RocketChat Me Donne Quand je créée un incoming webhook
# -> SI la requête curl échoue, alors "exit 1" sera évalué, et donc le processus d'exécution de script s'interrompt, et retourne le code d'erreur 1
export JSON_RECUPERE=""
#       "authToken": "9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq",
#       "userId": "aobEdbYhXfu5hkeqG",    
export AUTH_TOKEN_RECUPERE=9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
export USER_ID_RECUPERE=9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
# export CHATROOM_HUBOT_ROOM_ID=ByehQjC44FwMeiLbX

curl --fail http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP" || exit 1

JSON_RECUPERE=$(curl --fail http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP")

export JSON_RECUPERE
# ------------------ anti-slash point, pour "sourcer" les deux sous process $(...)
AUTH_TOKEN_RECUPERE=$(echo "$JSON_RECUPERE"|grep authToken| awk -F '{print $2}')
USER_ID_RECUPERE=$(echo "$JSON_RECUPERE"|grep userId| awk -F '{print $2}')
# - TODO:  récupérer la valeur de l'AuthToken retourné (de même on récupèrera l'ID de la CHATROOM créée pour le hubot avec le REST API 
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  DEBUG  :  dans le HEALTH CHECK DNS LE CONTENEUR ROCKETCHAT : pour  le HUBOT "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  VERIF [JSON_RECUPERE=$JSON_RECUPERE]"
# echo "  "
# echo "  VERIF [AUTH_TOKEN_RECUPERE=$AUTH_TOKEN_RECUPERE]"
# echo "  "
# echo "  VERIF [USER_ID_RECUPERE=$USER_ID_RECUPERE]"
# echo "  "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  "
# echo "  "


# ===>>>>> Test CURL pour vérifier l'existence de la CHATROOM $CHATROOM_ROCKETCHAT_HUBOT
curl --fail -H "X-Auth-Token: $AUTH_TOKEN_RECUPERE" \
     -H "X-User-Id: $USER_ID_RECUPERE" \
     http://localhost:3000/api/v1/channels.info?roomName=$CHATROOM_ROCKETCHAT_HUBOT \
     || exit 1
     # http://localhost:3000/api/v1/channels.info?roomId=$CHATROOM_HUBOT_ROOM_ID \ # Si le romoName est fourni, le roomId est Optionnel 
     
     
     
# https://rocket.chat/docs/developer-guides/rest-api/channels/open/ ===>> APPARREMENT, IL FAUT AJOUTER UN CHANNEL A UN UTILISATEUR


# ===>>>>> Test CURL pour vérifier que l'utilisateur $UTILISATEUR_ROCKETCHAT_HUBOT a les permissions pour entrer dans la $CHATROOM_ROCKETCHAT_HUBOT
# echo "Pour l'instant, le HEALTHCHECK USER Et CHATROMM ROKETCHAT POUR HUBOT, EST ENCORE à implémenter. DOnc le test échoue par défaut d'implémentation".
# exit 1

