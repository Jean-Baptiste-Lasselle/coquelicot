#!/bin/bash

# La valeur de ces 3 variables est passée en argument par le script ./operations.sh
# Le script ./operations.sh déduit du fichier docker-compose.yml, la valeur de ces variables, en parsant
# les variables d'environnement déclarées pour chaque définition de service dans le [docker-compose.yml].
# Pour ces variables d'envrionnement, je vais utiliser le ficheir de conf de varibles globales docker-compose :
# le fichier [.env] , cf. doc officielle [https://docs.docker.com/compose/environment-variables/#the-env-file]
# -------------------------------------------------------------------------------------------------------------------------
# export UTILISATEUR_ROCKETCHAT_HUBOT=$1
# export UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$2
# export CHATROOM_ROCKETCHAT_HUBOT=$3


# Ce healthcheck vérifiera : 
# -------------------------------------------------------------------------------------------------------------------------
# -- Que le user RocketChat, que le HUBOT va utiliser, est bien créé,
# -- Que j'arrive bien à l'authentifier auprès de RocketChat avec le user et le mot de passe qui seront utilisés par le HUBOT:
# -- Que la Chatroom que le HUBOT va utiliser, est bien créée, que j'arrive à entrer (j'ai les permissions suffisantes) dans 
#    cette Chatroom, avec le user et le mot de passe testés précédemment.

# -------------------------------------------------------------------------------------------------------------------------
# Pour ce faire, ce HealthCheck Utilisera : 
# -------------------------------------------------------------------------------------------------------------------------
# - l'exacte même bibliothèque que le HUBOT distribué par RocketCHat, utilise pour s'authentifier à RockerChat
# - et le distribution management de ce cette recette docker-compose, healthcheck, doit permettre de garantir que : 
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HUBOT, de la biliothèque utilisée dans le HUBOT de cette recette
#       et
#     ++ le numéro de version $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK, de la biliothèque utilisée dans ce HEALTHCHECK
#       sont égaux, et cette recette devra même permettre de fixer cette valeur avec un seul et même paramètre de
#       configuration, qui sera la version de HUBOT.
#       Ainsi, la version de HUBOT doit permettre de résoudre la dépendance : $VERSION_LIB_AUTH_ROCKET_HEALTHCHECK
#       Et donc ce Healtcheck est elligible à être versionné en tant que dépendance, dans un repo git distinct de 
#       cette recette, pour la souplesse des tests.
# -------------------------------------------------------------------------------------------------------------------------
# Noooon, ce quio est naturel ici, c’est d’utiliser les moyens que l’application RocketChat Elle-même, met à disposition, pour vérifier si un user existe bel et bien. Donc envoyer uen requête HTTPréalisant l’authentification, quitte à la choper à la volée,dans Firefox, avec la console réseau accessible F12.
# Voire même, il faurdrait utiliser la REST AP I de Rocket Chat , qui permet à l’application mobile, de réaliser l’authentification.
# Encore jsute des requêtes HTTP CURL, qu ece soit pour vérifier le user, ou vérifer l’existence de la CHATROOM
# -------------------------------------------------------------------------------------------------------------------------
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  DEBUG  :  dans le HEALTH CHECK DNS LE CONTENEUR ROCKETCHAT : pour  le HUBOT / AVANT TOUTE COMMANDE "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT=$UTILISATEUR_ROCKETCHAT_HUBOT]"
# echo "  "
# echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP]"
# echo "  "
# echo "  VERIF [CHATROOM_ROCKETCHAT_HUBOT=$CHATROOM_ROCKETCHAT_HUBOT]"
# echo "  "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  "
# echo " ------------------------------------------------------------ "
# echo "  "
# echo "  "
# echo "  "

# + Pour compter le nombre d'exécutions du présent script (donc du conteneur tout entier)
# rm -f ./compteur-executions-soudeur.jbl

echo " Je suis le soudeur de Rocketchat, et je traville, Veuillez ne pas me déranger svp. " >> ./compteur-executions-soudeur.jbl

export NOMBRE_LIGNES=$(wc -l ./compteur-executions-soudeur.jbl |awk '{print $1}')
# - La Femme Française, est belle, avant tout. C'est la première des règles. Et peu importe qu'elle soit dans le méttier de la soudure, Elle est Belle.
export BEAU_SUFFIXE_FRANCAIS="ère"

if [ "$NOMBRE_LIGNES" == "1" ]; then
  BEAU_SUFFIXE_FRANCAIS="ère"
else
  BEAU_SUFFIXE_FRANCAIS="ième"
fi

# ===>>>>> Test CURL pour vérifier l'auth avec le user $UTILISATEUR_ROCKETCHAT_HUBOT et le mot de passe $UTILISATEUR_ROCKETCHAT_HUBOT_MDP
# cf. https://rocket.chat/docs/developer-guides/rest-api/authentication/login/
# D'après cette doc, il faudrait que j'ajoute une option curl pour préciser un apiTken ou un truc comme ça, comme celui que
# RocketChat Me Donne Quand je créée un incoming webhook
# -> SI la requête curl échoue, alors "exit 1" sera évalué, et donc le processus d'exécution de script s'interrompt, et retourne le code d'erreur 1
export AUTH_HUBOT_JSON_RECUPERE=""
#       "authToken": "9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq",
#       "userId": "aobEdbYhXfu5hkeqG",    
export AUTH_TOKEN_RECUPERE=9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
export USER_ID_RECUPERE=9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
# export CHATROOM_HUBOT_ROOM_ID=ByehQjC44FwMeiLbX

export AUTH_HUBOT_JSON_RECUPERE=$(curl --fail http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP" || exit 1)

# export AUTH_HUBOT_JSON_RECUPERE=$(curl --fail http://localhost:3000/api/v1/login -d "username=$UTILISATEUR_ROCKETCHAT_HUBOT&password=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP")
echo "   "
echo " JIBL POUR DEBUG HEALTHCHECK_ROCKETCHAT / AUTH_HUBOT_JSON_RECUPERE : "
echo "   "
echo "$AUTH_HUBOT_JSON_RECUPERE"
echo "   "

export REUSSITE_AUTH_UTILISATEUR_HUBOT_ROCKETCHAT=$(echo "$AUTH_HUBOT_JSON_RECUPERE" | jq -r '.status')
if [ "$REUSSITE_AUTH_UTILISATEUR_HUBOT_ROCKETCHAT" == "success" ]; then
  # alors l'authentification avec l'utilisateur initial  ROCKETCHAT  s'est bien déroulée, et HEALTHCHECK DOIT REUSSIR silencieusement
  echo "J'ai pu m'authentifier avec l'utilisateur ROCKETCHAT dont le HUBOT fait usage, il existe donc bel et bien, et je peux vérifier ses roles et permissions.  "
else
  echo "Je n'ai pas pu m'authentifier avec l'utilisateur ROCKETCHAT dont lke hubot fait usage, Le HEalthcheck doit donc échouer, parceque RocketChat n'est pas prêt à l'emploi pour le HUBOT "
  exit 1
fi

echo " Ceci est la $NOMBRE_LIGNES-$BEAU_SUFFIXE_FRANCAIS exécution du helthcheck de rocketchat, consistant à vérifier l'existence et la disponibilité de l'utilisateur dont le HUBOT fera usage. "



# ------------------ On doit utiliser le userId et authToken de l'utilisateur Admin initial, pour vérifier l'existence de la chatroom : parce que c'est un admin légitme, le robot HUBOT n'a pas vocation a avoir les droits d'un super-admin.
# - Récupération AUTH_TOKEN  et USER_ID de l'utilisateur initial créé dans RocketCHat : il exxiste, il est actif, et est admin
export AUTH_TOKEN_UTILISATEUR_ADMIN_INITIAL="9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq"
export USER_ID_UTILISATEUR_ADMIN_INITIAL="aobEdbYhXfu5hkeqG"
# - dans dokcerfile : 
#         - ADMIN_USERNAME=$USERNAME_UTILISATEUR_ADMIN_INITIAL 
#         - ADMIN_PASS=$MDP_UTILISATEUR_ADMIN_INITIAL" 
#         - ADMIN_EMAIL=$UTILISATEUR_ROCKETCHAT_HUBOT_EMAIL
export RESULTAT_JSON_AUTH_UTILISATEUR_ADMIN_INITIAL=$(curl --fail http://localhost:$PORT/api/v1/login \
     -d "username=$ADMIN_USERNAME&password=$ADMIN_PASS" || exit 1)

# et ça, c'est la manière dont le HUBOT récupèrera les userId et authToken qui lui sont destinés.
export AUTH_TOKEN_UTILISATEUR_ADMIN_INITIAL=$(echo "$RESULTAT_JSON_AUTH_UTILISATEUR_ADMIN_INITIAL"  | jq -r '.data.authToken')
export USER_ID_UTILISATEUR_ADMIN_INITIAL=$(echo "$RESULTAT_JSON_AUTH_UTILISATEUR_ADMIN_INITIAL"  | jq -r '.data.userId' )


echo " ------------------------------------------------------------ "
echo "  "
echo "  DEBUG  :  dans le HEALTH CHECK DNS LE CONTENEUR ROCKETCHAT : pour  le HUBOT "
echo " ------------------------------------------------------------ "
echo "  "
echo "  VERIF [AUTH_HUBOT_JSON_RECUPERE="
echo "$AUTH_HUBOT_JSON_RECUPERE"
echo " ------------------------------------------------------------ "
echo "  "
echo "  VERIF no PORT du serveur [PORT=$PORT]"
echo "  "
echo "  VERIF [ADMIN_USERNAME=$ADMIN_USERNAME]"
echo "  "
echo "  VERIF [ADMIN_PASS=$ADMIN_PASS]"
echo "  "
echo "  VERIF [AUTH_TOKEN_UTILISATEUR_ADMIN_INITIAL=$AUTH_TOKEN_UTILISATEUR_ADMIN_INITIAL]"
echo "  "
echo "  VERIF [USER_ID_UTILISATEUR_ADMIN_INITIAL=$USER_ID_UTILISATEUR_ADMIN_INITIAL]"
echo "  "
echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT=$UTILISATEUR_ROCKETCHAT_HUBOT]"
echo "  "
echo "  VERIF [UTILISATEUR_ROCKETCHAT_HUBOT_MDP=$UTILISATEUR_ROCKETCHAT_HUBOT_MDP]"
echo "  "
echo "  VERIF [CHATROOM_ROCKETCHAT_HUBOT=$CHATROOM_ROCKETCHAT_HUBOT]"
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "  "
echo "  "


# ===>>>>> Test CURL pour vérifier l'existence de la CHATROOM $CHATROOM_ROCKETCHAT_HUBOT
export RESULTAT_EXISTENCE_CHATROOM=$(curl --fail -H "X-Auth-Token: $AUTH_TOKEN_UTILISATEUR_ADMIN_INITIAL" -H "X-User-Id: $USER_ID_UTILISATEUR_ADMIN_INITIAL" http://localhost:3000/api/v1/channels.info?roomName=$CHATROOM_ROCKETCHAT_HUBOT || exit 1)
echo " ------------------------------------------------------------ "
echo "  "
echo " Réponse JSON à  RESULTAT_EXISTENCE_CHATROOM :  "
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "$RESULTAT_EXISTENCE_CHATROOM"
echo "  "
echo " ------------------------------------------------------------ "
echo "  "
echo "  "
export RESULTAT_EXISTENCE_CHATROOM=$(echo "$RESULTAT_EXISTENCE_CHATROOM" | jq -r '.success' )

if [ "$RESULTAT_EXISTENCE_CHATROOM" == "true" ]; then
  echo " C'est bon la CHATROOM [CHATROOM_ROCKETCHAT_HUBOT=$CHATROOM_ROCKETCHAT_HUBOT]  existe bel et bien "
else
  echo " La CHATROOM [CHATROOM_ROCKETCHAT_HUBOT=$CHATROOM_ROCKETCHAT_HUBOT]  n'existe pas encore, il faut la créer avec le soudeur?.... "
fi
# - REPONSE JSON ATTENDUE : 
# 
# {
#   "channel": {
#     "_id": "ByehQjC44FwMeiLbX",
#     "ts": "2016-11-30T21:23:04.737Z",
#     "t": "c",
#     "name": "testing",
#     "usernames": [
#       "testing",
#       "testing1",
#       "testing2"
#     ],
#     "msgs": 1,
#     "default": true,
#     "_updatedAt": "2016-12-09T12:50:51.575Z",
#     "lm": "2016-12-09T12:50:51.555Z"
#   },
#   "success": true
# }


# http://localhost:3000/api/v1/channels.info?roomId=$CHATROOM_HUBOT_ROOM_ID \ # Si le romoName est fourni, le roomId est Optionnel 
     
     
     
# https://rocket.chat/docs/developer-guides/rest-api/channels/open/ ===>> APPARREMENT, IL FAUT AJOUTER UN CHANNEL A UN UTILISATEUR


# ===>>>>> Test CURL pour vérifier que l'utilisateur $UTILISATEUR_ROCKETCHAT_HUBOT a les permissions pour entrer dans la $CHATROOM_ROCKETCHAT_HUBOT
# echo "Pour l'instant, le HEALTHCHECK USER Et CHATROMM ROKETCHAT POUR HUBOT, EST ENCORE à implémenter. DOnc le test échoue par défaut d'implémentation".
# exit 1

